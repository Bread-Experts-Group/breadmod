//file:noinspection GroovyAssignabilityCheck
plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.jetbrains.kotlin.jvm' version '1.9.22'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.22'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

String buildVersion
try {
    String envVer = System.getenv("MOD_VERSION")
    buildVersion = envVer ? envVer : mod_version
    System.out.println("Mod version set: " + buildVersion)
} catch(Exception ignored) {
    System.out.println("Cannot get env variable 'MOD_VERSION', falling back to gradle.properties")
    buildVersion = mod_version
}
String minimumLevel = "INFO"
mod_version = buildVersion
version = buildVersion
group = mod_group_id
base { archivesName = mod_id }
String thisModId = getProperty("mod_id")

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    runs {
        configureEach {
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', minimumLevel

            mods {
                "$mod_id" {
                    source sourceSets.main
                }
            }
        }

        client {
            workingDirectory file("run")

            property 'forge.enabledGameTestNamespaces', thisModId

            File mixinFile = file("src/main/resources/${thisModId}.mixin.json")
            if(mixinFile.canRead()) { arg "-mixin.config=${thisModId}.mixin.json" }
        }
        data {
            workingDirectory file("run")

//            println("${file('src/main/resources/').absolutePath.replace('\\','/')}/")
            args = List.of(
                    '--mod', thisModId,
                    '--all', '--output', file('src/generated/resources/'),
                    '--existing', file('src/main/resources')
            )
//            println(args)
        }
    }
}

sourceSets.main.resources { srcDirs 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:$minecraft_version-$forge_version"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation "thedarkcolour:kotlinforforge:$kff_version"
    implementation rootProject

    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))
    compileOnly(fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api"))
    runtimeOnly(fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}"))
    implementation fg.deobf("mekanism:Mekanism:${minecraft_version}-${mekanism_version}")
    implementation fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    runtimeOnly fg.deobf("curse.maven:embeddium-908741:5503379")

    runtimeOnly(fg.deobf("curse.maven:pipez-${pipez_project_id}:${pipez_file_id}"))
    implementation(fg.deobf("curse.maven:jade-${jade_project_id}:${jade_file_id}"))
    implementation(fg.deobf("curse.maven:projecte-${projecte_project_id}:${projecte_file_id}"))
    implementation(fg.deobf("curse.maven:farmersdelight-${farmers_delight_project_id}:${farmers_delight_file_id}"))
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties  = [
        minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
        forge_version: forge_version, forge_version_range: forge_version_range,
        mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: buildVersion,
        mod_authors: mod_authors, mod_description: mod_description,

        jei_version_range: jei_version_range,
        create_version_range: create_version_range, projecte_version_range: projecte_version_range,
        mekanism_version_range: mekanism_version_range, jade_version_range: jade_version_range,
        farmers_delight_version_range: farmers_delight_version_range,
        breadmod_version_range: breadmod_version_range
]
processResources {
    inputs.properties replaceProperties

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

tasks.register('prepareKotlinBuildScriptModel') {}

// Keeping this jar copy code here just in case something fucks up and we have to fall back to it

// Copy breadmod to runs/breadmod-x.jar for run
//CopySpec constructParentModJarSpec = copySpec {
//    from rootProject.layout.buildDirectory.dir('libs')
//    include 'breadmod-*.jar'
//}
//
//tasks.register('copyParentBuild', Copy) {
//    dependsOn(':jar')
//
//    into layout.projectDirectory.dir("run").dir("mods")
//    with constructParentModJarSpec
//}
//
//afterEvaluate {
//    tasks.named("prepareRuns") {
//        dependsOn("copyParentBuild")
//    }
//}