import net.fabricmc.loom.configuration.ide.RunConfigSettings

plugins {
    id 'com.github.johnrengelman.shadow'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.serialization'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

//noinspection GroovyAssignabilityCheck
File generatedResources = file('src/main/generated')
File commonResources = project(':common').file('src/main/resources')

tasks.withType(Copy).configureEach { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }

sourceSets {
    main {
        resources.srcDirs generatedResources
    }
}

loom {
    runs {
        datagen {
            data()
            programArgs "--all", "--mod", "breadmod"
            programArgs "--output", generatedResources.absolutePath
            programArgs "--existing", commonResources.absolutePath
        }
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = "Kotlin for Forge"
        setUrl("https://thedarkcolour.github.io/KotlinForForge/")
    }

    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
//    maven { url 'https://modmaven.dev/' }
    mavenCentral()
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"
    implementation "thedarkcolour:kotlinforforge-neoforge:5.5.0" exclude group: 'net.neoforged.fancymodloader', module: 'loader'

    compileOnly "mekanism:Mekanism:${mekanism_version}:api"

    // If you want to test/use Mekanism & its modules during `runClient` invocation, use the following
    runtimeOnly("mekanism:Mekanism:${mekanism_version}") // Mekanism
    runtimeOnly("mekanism:Mekanism:${mekanism_version}:additions")// Mekanism: Additions
    runtimeOnly("mekanism:Mekanism:${mekanism_version}:generators") // Mekanism: Generators
    runtimeOnly("mekanism:Mekanism:${mekanism_version}:tools") // Mekanism: Tools

    // compile against the JEI API but do not include it at runtime
    compileOnly("mezz.jei:jei-1.21.1-neoforge-api:19.10.0.126")
    // at runtime, use the full JEI jar for NeoForge
    runtimeOnly("mezz.jei:jei-1.21.1-neoforge:19.10.0.126")

    implementation "curse.maven:jade-324717:5706149"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
kotlin {
    jvmToolchain(21)
}
