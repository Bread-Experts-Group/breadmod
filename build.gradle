//file:noinspection GroovyAssignabilityCheck
plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.jetbrains.kotlin.jvm' version '2.0.0'
    id 'org.jetbrains.kotlin.plugin.serialization' version '2.0.0'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

mixin {
    // MixinGradle Settings
    add sourceSets.main, "breadmod.refmap.json"
    config "breadmod.mixin.json"
}

// Jar Construction: Version
String buildVersion
try {
    String envVer = System.getenv("MOD_VERSION")
    buildVersion = envVer ? envVer : mod_version
    System.out.println("Mod version set: " + buildVersion)
} catch(Exception ignored) {
    System.out.println("Cannot get env variable 'MOD_VERSION', falling back to gradle.properties")
    buildVersion = mod_version
}
String minimumLevel = "INFO"
mod_version = buildVersion
version = buildVersion
group = mod_group_id
base { archivesName = mod_id }
String thisModId = getProperty("mod_id")

allprojects {
    java.toolchain.languageVersion = JavaLanguageVersion.of(22)
    compileKotlin { kotlinOptions.jvmTarget = "22" }

    repositories {
        maven {
            name = 'Kotlin for Forge'
            url = 'https://thedarkcolour.github.io/KotlinForForge/'
            content { includeGroup "thedarkcolour" }
        }
        maven {
            name = "Jared's maven"
            url = "https://maven.blamejared.com/"
        }
        maven {
            name = 'tterrag Maven'
            url = 'https://maven.tterrag.com/'
        }
        maven {
            name = "ModMaven"
            url = "https://modmaven.dev"
        }
        maven {
            name = "CurseForge Maven"
            url "https://cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
        maven {
            name = "Illusive Soulworks maven"
            url = "https://maven.theillusivec4.top/"
        }
    }

    tasks.withType(JavaCompile).configureEach { options.encoding = 'UTF-8' }

    // use in the future for maven
    // jar.finalizedBy('reobfJar')

    def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
    def replaceProperties  = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: buildVersion,
            mod_authors: mod_authors, mod_description: mod_description,

            jei_version_range: jei_version_range,
            create_version_range: create_version_range, projecte_version_range: projecte_version_range,
            mekanism_version_range: mekanism_version_range, jade_version_range: jade_version_range,
            farmers_delight_version_range: farmers_delight_version_range
    ]
    processResources {
        inputs.properties replaceProperties

        filesMatching(resourceTargets) {
            expand replaceProperties
        }

        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    }

    jar {
        manifest {
            String authors = rootProject.property("mod_authors")
            attributes([
                    'Specification-Title'     : thisModId,
                    'Specification-Vendor'    : authors,
                    'Specification-Version'   : "1",
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.jar.archiveVersion,
                    'Implementation-Vendor'   : authors,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }
}

minecraft {
    mappings channel: mapping_channel_parchment, version: mapping_version_parchment
    File atFile = file("src/main/resources/META-INF/accesstransformer.cfg")
    if(atFile.canRead()) { accessTransformer = atFile }

    // REQUIRED for processResources to work in dev
    copyIdeResources = true

    runs {

        configureEach {
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', minimumLevel

            mods {
                "$mod_id" {
                    source sourceSets.main
                }
            }
        }

        client {
            workingDirectory file("run")

//            args '--username', 'PizzaTime65', '--uuid', '30cdf636-82ed-47ee-9a9c-4d820c0d76a9'
//            args '--username', 'Meownium', '--uuid', '34e8274a-c02c-4c32-9311-2bccc9f6ba7d'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'forge.enabledGameTestNamespaces', thisModId

            File mixinFile = file("src/main/resources/${thisModId}.mixin.json")
            if(mixinFile.canRead()) { arg "-mixin.config=${thisModId}.mixin.json" }
        }

        server {
            workingDirectory file('run/server')
            property 'forge.enabledGameTestNamespaces', thisModId
        }

        gameTestServer {
            workingDirectory file('run/server')
            property 'forge.enabledGameTestNamespaces', thisModId
        }

        data {
            workingDirectory file("run")

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', minimumLevel
//                println("${file('src/main/resources/').absolutePath.replace('\\','/')}/")
            args '--all', '--output', file('src/generated/resources/'),
                    '--mod', thisModId, '--existing', file('src/main/resources')
//                println(args)
        }
    }
}

// Include assets and data from data generators
sourceSets.main.resources { srcDirs 'src/generated/resources/' }

dependencies {
    minecraft "net.minecraftforge:forge:$minecraft_version-$forge_version"
    implementation "thedarkcolour:kotlinforforge:$kff_version"
//    runtimeOnly project(":advanced")
    // todo leaving this commented out for now until a solution that DOESN'T involve erroring out refreshing gradle is found

    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))
    compileOnly(fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api"))
    runtimeOnly(fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}"))
    implementation fg.deobf("mekanism:Mekanism:${minecraft_version}-${mekanism_version}")
    implementation fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
//    runtimeOnly fg.deobf("curse.maven:embeddium-908741:5503379")
//    runtimeOnly fg.deobf("curse.maven:oculus-581495:5299671")

    runtimeOnly(fg.deobf("curse.maven:pipez-${pipez_project_id}:${pipez_file_id}"))
    implementation(fg.deobf("curse.maven:jade-${jade_project_id}:${jade_file_id}"))
    implementation(fg.deobf("curse.maven:projecte-${projecte_project_id}:${projecte_file_id}"))
    implementation(fg.deobf("curse.maven:farmersdelight-${farmers_delight_project_id}:${farmers_delight_file_id}"))
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            artifact jar
//        }
//    }
//    repositories {
//        maven {
//            url "file://${project.projectDir}/mcmodsrepo"
//        }
//    }
//}