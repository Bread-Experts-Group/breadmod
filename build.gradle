plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.jetbrains.kotlin.jvm' version '1.9.22'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.22'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

mixin {
    // MixinGradle Settings
    add sourceSets.main, "breadmod.refmap.json"
    config "breadmod.mixin.json"
}

String buildVersion
try {
    String envVer = System.getenv("MOD_VERSION")
    buildVersion = envVer ? envVer : mod_version
    System.out.println("Mod version set: " + buildVersion)
} catch(Exception ignored) {
    System.out.println("Cannot get env variable 'MOD_VERSION', falling back to gradle.properties")
    buildVersion = mod_version
}
mod_version = buildVersion
version = buildVersion
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println("Java: ${System.getProperty('java.version')}, JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')}), Arch: ${System.getProperty('os.arch')}")
minecraft {
    mappings channel: mapping_channel_parchment, version: mapping_version_parchment
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        // REQUIRED for processResources to work in dev
        copyIdeResources = true

        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id

            arg "-mixin.config=breadmod.mixin.json"

            mods {
                "$mod_id" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "$mod_id" {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run/server')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "$mod_id" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')

            mods {
                "$mod_id" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include assets and data from data generators
sourceSets.main.resources { srcDirs 'src/generated/resources/' }

repositories {
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
        content { includeGroup "thedarkcolour" }
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    // UPDATE TO AVOID VULNERABILITY TODO
    minecraft "net.minecraftforge:forge:$minecraft_version-$forge_version"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation "thedarkcolour:kotlinforforge:$kff_version"

    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

    runtimeOnly(fg.deobf("curse.maven:pipez-${pipez_project_id}:${pipez_file_id}"))
    implementation(fg.deobf("curse.maven:mekanism-${mekanism_project_id}:${mekanism_file_id}"))
    implementation(fg.deobf("curse.maven:jade-${jade_project_id}:${jade_file_id}"))
    implementation(fg.deobf("curse.maven:projecte-${projecte_project_id}:${projecte_file_id}"))
    implementation(fg.deobf("curse.maven:create-${create_project_id}:${create_file_id}"))
    implementation(fg.deobf("curse.maven:farmersdelight-${farmers_delight_project_id}:${farmers_delight_file_id}"))
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties  = [
        minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
        forge_version: forge_version, forge_version_range: forge_version_range,
        mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: buildVersion,
        mod_authors: mod_authors, mod_description: mod_description,

        jei_version_range: jei_version_range,
        create_version_range: create_version_range, projecte_version_range: projecte_version_range,
        mekanism_version_range: mekanism_version_range, jade_version_range: jade_version_range,
        farmers_delight_version_range: farmers_delight_version_range
]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

compileKotlin {
    kotlinOptions.jvmTarget = "17"
}

jar {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : "1",
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// The below is only required if using 'maven-publish' and you want to publish to maven or use JitPack
jar.finalizedBy('reobfJar')
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}